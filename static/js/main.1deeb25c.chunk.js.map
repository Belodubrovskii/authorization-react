{"version":3,"sources":["components/PopupWithForm.js","utils/api.js","utils/utils.js","components/Header.js","components/UsersList.js","App.js","serviceWorker.js","index.js"],"names":["PopupWithForm","props","className","isOpen","onSubmit","handleSubmit","error","value","username","onChange","userChange","type","placeholder","required","minLength","password","passwordChange","onClick","onClose","api","apiOptions","this","_baseUrl","baseUrl","_headers","headers","res","ok","json","Promise","reject","statusText","err","message","userData","fetch","method","body","JSON","stringify","then","_handleResponse","catch","_handleResponseError","token","Authorization","Accept","Header","handlePopupOnen","UsersList","React","useState","usersList","setUsersList","sortAscending","setSortAscending","isSorted","setSorted","objList","setObjList","setValue","useEffect","users","data","map","user","key","id","name","filteredUsers","filter","item","toLowerCase","inputName","indexOf","sort","a","b","filterByName","slice","sortById","logOut","evt","target","App","isPopupOpen","setPopupOpen","userNameValue","setUserNameValue","passwordValue","setPassword","setUsername","setToken","isError","setError","localStorage","basename","to","exact","path","preventDefault","login","setItem","removeItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1deeb25c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction PopupWithForm (props) {\n  return (\n    <section className={`popup ${props.isOpen ? 'popup_opened' : ''}`}>\n    <form onSubmit={props.handleSubmit} className=\"popup__form\">\n      <h4 className=\"popup__title\">Sing In</h4>\n      <span className={`popup__error ${props.error ? 'popup__error_visible' : ''}`}>Incorrect login or password!</span>\n      <input value={props.username} onChange={props.userChange} className=\"popup__input popup__form-name\" type=\"text\" placeholder=\"Username\" required minLength=\"1\"></input>\n      <input value={props.password} onChange={props.passwordChange} className=\"popup__input popup__form-name\" type=\"password\" placeholder=\"Passsword\" required minLength=\"1\"></input>\n      <input className=\"popup__button\" type=\"submit\" value=\"Sign In\"/>\n      <button onClick={props.onClose} className=\"popup__close-button\" type=\"button\" />\n    </form>\n  </section>\n  );\n}\n\nexport default PopupWithForm;\n"," import {apiOptions} from './utils.js'\r\n\r\n class Api {\r\n  constructor({apiOptions}) {\r\n    this._baseUrl = apiOptions.baseUrl;\r\n    this._headers = apiOptions.headers;\r\n  }\r\n\r\n  _handleResponse(res){\r\n    if (res.ok) {\r\n      return res.json();\r\n    } else {\r\n      return Promise.reject(res.statusText)\r\n    }\r\n  }\r\n\r\n  _handleResponseError(err){\r\n\r\n    return Promise.reject(err.message)\r\n  }\r\n\r\n  login (userData) {\r\n    return fetch(`${this._baseUrl}/api-token-auth/`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        username: userData.username,\r\n        password: userData.password\r\n      })\r\n    })\r\n    .then(this._handleResponse)\r\n    .catch(this._handleResponseError);\r\n  }\r\n\r\n  users (token) {\r\n    return fetch(`${this._baseUrl}/api/v1/users/`, {\r\n      method: 'GET',\r\n      headers: {...this._headers, Authorization: `Token ${token}`},\r\n    })\r\n    .then(this._handleResponse)\r\n    .catch(this._handleResponseError);\r\n  }\r\n\r\n  // createUser (data) {\r\n  //   return fetch(`${this._baseUrl}/api/v1/users/`, {\r\n  //     method: 'POST',\r\n  //     headers: this._headers,\r\n  //     body: JSON.stringify(data)\r\n  //   })\r\n  //   .then(this._handleResponse)\r\n  //   .catch(this._handleResponseError);\r\n  // }\r\n}\r\n\r\nexport const api = new Api({apiOptions});\r\n\r\n","\r\nexport const apiOptions = {\r\n  baseUrl: 'https://emphasoft-test-assignment.herokuapp.com',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Header (props) {\r\n  \r\n  return (\r\n    <section className=\"login\">\r\n      <div className=\"header\">\r\n        <h1 className=\"header__title\">Welcome</h1>\r\n        <button onClick={props.handlePopupOnen} className=\"header__button\" type=\"button\">Sign In</button>\r\n      </div>\r\n    </section>\r\n  ) \r\n}","import React from 'react';\r\nimport {api} from '../utils/api.js'\r\nimport './UsersList.css';\r\n\r\nexport default function UsersList (props) {\r\n\r\n  const [usersList, setUsersList] = React.useState([]);\r\n  const [sortAscending, setSortAscending] = React.useState(false);\r\n  const [isSorted, setSorted] = React.useState(false);\r\n  const [objList, setObjList] = React.useState([]);\r\n  const [value, setValue] = React.useState('');\r\n\r\n  function handleChange (evt) {\r\n    setValue(evt.target.value)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    api.users(props.token)\r\n      .then(data => {\r\n\r\n        setUsersList(data.map((user) => (\r\n          <tr key={user.id}>\r\n            <td className=\"user-name\">{user.username}</td>\r\n            <td className=\"user-id\">{user.id}</td>\r\n          </tr>\r\n        )))\r\n\r\n        setObjList(data.map((userData) => {\r\n          return {name: userData.username,\r\n                  id: userData.id}\r\n        }))\r\n      })\r\n  },[])\r\n\r\n  React.useEffect(() => {\r\n\r\n    function filterByName () {\r\n\r\n      const filteredUsers = objList.filter((item) => {\r\n\r\n        let name = item.name.toLowerCase();\r\n        let inputName = value.toLowerCase();\r\n\r\n        if (name.indexOf(inputName) === 0) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n      if (isSorted) {\r\n        filteredUsers.sort((a, b) => {\r\n          return sortAscending ? a.id - b.id : b.id - a.id\r\n        })\r\n      }\r\n\r\n      setUsersList(filteredUsers.map((user) => (\r\n        <tr key={user.id}>\r\n          <td className=\"user-name\">{user.name}</td>\r\n          <td className=\"user-id\">{user.id}</td>\r\n        </tr>\r\n      )))\r\n    }\r\n\r\n    filterByName();\r\n\r\n  },[value])\r\n\r\n  React.useEffect(() => {\r\n\r\n    function sortById () {\r\n      \r\n      let filteredUsers = usersList.slice();\r\n      filteredUsers.sort((a, b) => {\r\n        return sortAscending ? a.key - b.key : b.key - a.key\r\n      })\r\n      setUsersList(filteredUsers);\r\n    }\r\n\r\n    sortById();\r\n\r\n  },[sortAscending])\r\n\r\n\r\n  function filterById () {\r\n    setSortAscending(!sortAscending);\r\n    setSorted(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n     <h1 className=\"title\">Welcome, {props.username}</h1>\r\n     <button className=\"button-logout\" onClick={props.logOut} type=\"button\">Log out</button>\r\n      <table>\r\n        <tbody className=\"table\">\r\n          <tr>\r\n            <td className=\"header-name\">\r\n              <input className=\"unput-name\" value={value} onChange={handleChange} placeholder=\"Username\"></input>\r\n            </td>\r\n            <td className=\"header-id\">\r\n              <button onClick={filterById} className=\"filter-button\" type=\"button\">Id</button>\r\n            </td>\r\n          </tr>\r\n          {usersList}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  ) \r\n}","import React from 'react';\nimport PopupWithForm from './components/PopupWithForm'\nimport {api} from './utils/api.js';\nimport Header from './components/Header';\nimport UsersList from './components/UsersList';\nimport {HashRouter, Route, Switch, Redirect} from 'react-router-dom';\n\nfunction App() {\n\n  const [isPopupOpen, setPopupOpen] = React.useState(false);\n  const [userNameValue, setUserNameValue] = React.useState('');\n  const [passwordValue, setPassword] = React.useState('');\n  const [username, setUsername] = React.useState('');\n  const [token, setToken] = React.useState('');\n  const [isError, setError] = React.useState(false);\n\n  React.useEffect(() => {\n    setToken(localStorage.token);\n    setUsername(localStorage.username);\n  }, [])\n  \n  function logOut () {\n    setToken('');\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"username\");\n  }\n\n  function handlePopupOnen () {\n    setPopupOpen(!isPopupOpen);\n    setUserNameValue('');\n    setPassword('');\n    setError(false);\n  }\n\n  function handleUserNameChange (evt) {\n    setUserNameValue(evt.target.value)\n  }\n\n  function handlePasswordChange (evt) {\n    setPassword(evt.target.value)\n  }\n\n  function authSubmit (evt) {\n    evt.preventDefault();\n\n    api.login({username: userNameValue, password: passwordValue})\n      .then(res => {\n        setToken(res.token);\n        setPopupOpen(false);\n        setError(false)\n        localStorage.setItem(\"token\", res.token)\n        localStorage.setItem(\"username\", userNameValue);\n        setUsername(userNameValue);\n      })\n      .catch(() => setError(true));\n\n  }\n\n\n  return (\n    <>\n    <HashRouter basename=\"/\">\n      {token ? <Redirect to=\"/users\"/> : <Redirect to=\"/\"/>}\n      <Switch>\n      {!token &&\n        <Route exact path=\"/\">\n          <>\n          < Header handlePopupOnen={handlePopupOnen}/>\n          <PopupWithForm \n            isOpen={isPopupOpen} \n            onClose={handlePopupOnen} \n            userChange={handleUserNameChange}\n            passwordChange={handlePasswordChange}\n            handleSubmit={authSubmit}\n            username={userNameValue}\n            password={passwordValue}\n            error={isError}\n          />  \n          </>\n        </Route> \n      }\n      {token && \n        <Route path=\"/users\">\n          < UsersList username={username} token={token} logOut={logOut} />\n        </Route>\n      }\n      </Switch>\n    </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}